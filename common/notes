package com.javadream.common.config;

import io.netty.channel.ChannelOption;
import io.netty.handler.timeout.ReadTimeoutHandler;
import io.netty.handler.timeout.WriteTimeoutHandler;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.reactive.ReactorClientHttpConnector;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.netty.http.client.HttpClient;
import reactor.netty.resources.ConnectionProvider;

import java.time.Duration;
import java.util.concurrent.TimeUnit;

@Configuration
public class WebClientFactory {

    @Bean
    public WebClient webClient() {
        ConnectionProvider provider = ConnectionProvider.builder("pooled-client")
                .maxConnections(200)
                .pendingAcquireTimeout(Duration.ofSeconds(60))
                .maxIdleTime(Duration.ofSeconds(60))
                .build();

        HttpClient httpClient = HttpClient.create(provider)
                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 10000)
                .doOnConnected(conn -> conn
                        .addHandlerLast(new ReadTimeoutHandler(60, TimeUnit.SECONDS))
                        .addHandlerLast(new WriteTimeoutHandler(60, TimeUnit.SECONDS)));

        return WebClient.builder()
                .clientConnector(new ReactorClientHttpConnector(httpClient))
                .build();
    }
}

====================

@RequiredArgsConstructor
@Component
@Slf4j
public class WebClientClient {

    private final WebClient webClient;
    private final ApiMappingService apiMappingService; // ✅ Injected

    public <T> Mono<T> callMono(String apiKey,
                                Map<String, String> queryParams,
                                Map<String, String> pathParams,
                                Map<String, String> headers,
                                Class<T> responseType) {

        String baseUrl = resolveUrl(apiKey, pathParams); // ✅ lookup + replace {id}
        URI uri = buildUri(baseUrl, queryParams);

        return webClient.get()
                .uri(uri)
                .headers(h -> {
                    if (headers != null) headers.forEach(h::add);
                })
                .retrieve()
                .bodyToMono(responseType)
                .onErrorResume(ex -> {
                    log.error("❌ API call failed: {}", ex.getMessage());
                    return Mono.error(new ExternalApiException("Call failed", ex));
                });
    }

    private String resolveUrl(String apiKey, Map<String, String> pathParams) {
        String template = apiMappingService.resolve(apiKey);
        if (pathParams != null) {
            for (Map.Entry<String, String> entry : pathParams.entrySet()) {
                template = template.replace("{" + entry.getKey() + "}", entry.getValue());
            }
        }
        return template;
    }

    private URI buildUri(String baseUrl, Map<String, String> queryParams) {
        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(baseUrl);
        if (queryParams != null) {
            queryParams.forEach((k, v) -> builder.queryParam(k, v));
        }
        return builder.build(true).toUri();
    }
}
