import io.netty.channel.ChannelOption;
import io.netty.handler.timeout.ReadTimeoutHandler;
import io.netty.handler.timeout.WriteTimeoutHandler;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.reactive.ReactorClientHttpConnector;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.netty.http.client.HttpClient;
import reactor.netty.resources.ConnectionProvider;

import java.time.Duration;
import java.util.concurrent.TimeUnit;

@Configuration
public class WebClientFactory {

    @Bean
    public WebClient webClient() {
        ConnectionProvider provider = ConnectionProvider.builder("custom-pool")
                .maxConnections(100)
                .pendingAcquireTimeout(Duration.ofSeconds(30))
                .maxIdleTime(Duration.ofSeconds(20))
                .build();

        HttpClient httpClient = HttpClient.create(provider)
                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000)
                .doOnConnected(conn -> conn
                        .addHandlerLast(new ReadTimeoutHandler(30, TimeUnit.SECONDS))  // ðŸ”¥ INCREASED
                        .addHandlerLast(new WriteTimeoutHandler(30, TimeUnit.SECONDS)));

        return WebClient.builder()
                .clientConnector(new ReactorClientHttpConnector(httpClient))
                .build();
    }
}


=================


package com.javadream.common.webclient;

import com.javadream.common.exception.ExternalApiException;
import com.javadream.common.mapping.ApiMappingService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.util.UriComponentsBuilder;
import reactor.core.publisher.Mono;

import java.lang.reflect.Field;
import java.net.URI;
import java.util.HashMap;
import java.util.Map;

@Slf4j
@Component
@RequiredArgsConstructor
public class WebClientClient {

    private final WebClient webClient; // âœ… Injected from factory
    private final ApiMappingService apiMappingService;

    public <T> Mono<T> callMono(String apiKey,
                                Object queryParams,
                                Map<String, String> pathParams,
                                Map<String, String> headers,
                                Class<T> responseType) {

        URI uri = buildUri(resolveUrl(apiKey, pathParams), toMap(queryParams));
        log.info("Calling third-party API [{}] -> {}", apiKey, uri);

        return webClient.get()
                .uri(uri)
                .headers(h -> {
                    if (headers != null) headers.forEach(h::add);
                })
                .retrieve()
                .bodyToMono(responseType);
    }

    private String resolveUrl(String key, Map<String, String> pathParams) {
        String url = apiMappingService.resolve(key);
        if (pathParams != null) {
            for (var entry : pathParams.entrySet()) {
                url = url.replace("{" + entry.getKey() + "}", entry.getValue());
            }
        }
        return url;
    }

    private static URI buildUri(String baseUrl, Map<String, String> queryParams) {
        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(baseUrl);
        queryParams.forEach((k, v) -> builder.queryParam(k, v == null ? "" : v));
        return builder.build(true).toUri();
    }

    private static Map<String, String> toMap(Object obj) {
        if (obj instanceof Map<?, ?> map) {
            Map<String, String> stringMap = new HashMap<>();
            map.forEach((k, v) -> stringMap.put(String.valueOf(k), String.valueOf(v)));
            return stringMap;
        }
        Map<String, String> result = new HashMap<>();
        for (Field field : obj.getClass().getDeclaredFields()) {
            field.setAccessible(true);
            try {
                Object val = field.get(obj);
                result.put(field.getName(), val == null ? "" : val.toString());
            } catch (Exception ignored) {}
        }
        return result;
    }
}



 private final WebClientClient webClientClient;
